// $(PLUGIN_NAME)FXParams.cpp

#include "$(PLUGIN_NAME)FXParams.h"
#include <AK/SoundEngine/Common/AkTypes.h>
#include <AK/Tools/Common/AkAssert.h>
#include <AK/Tools/Common/AkBankReadHelpers.h>

AK::IAkPluginParam* Create$(PLUGIN_NAME)FXParams( AK::IAkPluginMemAlloc* in_pAllocator )
{
	return AK_PLUGIN_NEW( in_pAllocator, C$(PLUGIN_NAME)FXParams() );
}

C$(PLUGIN_NAME)FXParams::C$(PLUGIN_NAME)FXParams
(
)
{
}

C$(PLUGIN_NAME)FXParams::C$(PLUGIN_NAME)FXParams
(
	const C$(PLUGIN_NAME)FXParams& in_rCopy
)
{
	RTPC.fExampleA = in_rCopy.RTPC.fExampleA;
	RTPC.bHasChanged = true;
	NonRTPC.bExampleB = in_rCopy.NonRTPC.bExampleB;
	NonRTPC.bHasChanged = true;
}

C$(PLUGIN_NAME)FXParams::~C$(PLUGIN_NAME)FXParams
(
)
{
}

AK::IAkPluginParam* C$(PLUGIN_NAME)FXParams::Clone( AK::IAkPluginMemAlloc* in_pAllocator )
{
	return AK_PLUGIN_NEW( in_pAllocator, C$(PLUGIN_NAME)FXParams( *this ) );
}

AKRESULT C$(PLUGIN_NAME)FXParams::Init
(
	AK::IAkPluginMemAlloc* in_pAllocator,
	const void* in_pParamsBlock,
	AkUInt32 in_ulBlockSize
)
{
	if ( in_ulBlockSize == 0 )
	{
		// Initialize using default parameters
		RTPC.fExampleA = $(PLUGIN_NAME_CAPS)FXPARAM_EXAMPLE_A_DEF;
		RTPC.bHasChanged = true;
		NonRTPC.bExampleB = $(PLUGIN_NAME_CAPS)FXPARAM_EXAMPLE_B_DEF;
		NonRTPC.bHasChanged = true;
		return AK_Success;
	}
	
	return SetParamsBlock( in_pParamsBlock, in_ulBlockSize );
}

AKRESULT C$(PLUGIN_NAME)FXParams::Term
(
	AK::IAkPluginMemAlloc* in_pAllocator
)
{
	AK_PLUGIN_DELETE( in_pAllocator, this );
	return AK_Success;
}

AKRESULT C$(PLUGIN_NAME)FXParams::SetParamsBlock
(
	const void* in_pParamsBlock,
	AkUInt32 in_ulBlockSize
)
{
	AKRESULT eResult = AK_Success;
	AkUInt8* pParamsBlock = ( AkUInt8* )in_pParamsBlock;
	
	RTPC.fExampleA = READBANKDATA( AkReal32, pParamsBlock, in_ulBlockSize );
	RTPC.bHasChanged = true;
	
	NonRTPC.bExampleB = READBANKDATA( bool, pParamsBlock, in_ulBlockSize );
	NonRTPC.bHasChanged = true;
	
	CHECKBANKDATASIZE( in_ulBlockSize, eResult );
	return eResult;
}

AKRESULT C$(PLUGIN_NAME)FXParams::SetParam
(
	AkPluginParamID in_ParamID,
	const void* in_pValue,
	AkUInt32 in_ulParamSize
)
{
	AKRESULT eResult = AK_Success;
	
	switch ( in_ParamID )
	{
		case $(PLUGIN_NAME_CAPS)FXPARAM_EXAMPLE_A_ID:
		{
			RTPC.fExampleA = *static_cast< const AkReal32* >( in_pValue );
			RTPC.bHasChanged = true;
			break;
		}
		case $(PLUGIN_NAME_CAPS)FXPARAM_EXAMPLE_B_ID:
		{
			NonRTPC.bExampleB = *static_cast< const bool* >( in_pValue );
			NonRTPC.bHasChanged = true;
			break;
		}
		default:
		{
			AKASSERT( !"Invalid parameter." );
			eResult = AK_InvalidParameter;
		}
	}
	
	return eResult;
}
