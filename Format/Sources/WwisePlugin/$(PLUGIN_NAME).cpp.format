// $(PLUGIN_NAME).cpp

#include "stdafx.h"
#include "$(PLUGIN_NAME).h"
#include "$(AUTHORING_PLUGIN_NAME).h"
#include <AK/Wwise/Utilities.h>
#include <AK/Tools/Common/AkAssert.h>

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

BEGIN_MESSAGE_MAP( C$(PLUGIN_NAME)App, CWinApp )
END_MESSAGE_MAP()

AK_FUNC( AK::IAkPlugin*, Create$(PLUGIN_NAME)FX )( AK::IAkPluginMemAlloc* in_pAllocator );
AK_FUNC( AK::IAkPluginParam*, Create$(PLUGIN_NAME)FXParams )( AK::IAkPluginMemAlloc* in_pAllocator );

C$(PLUGIN_NAME)App::C$(PLUGIN_NAME)App
(
)
{
}

C$(PLUGIN_NAME)App theApp;

BOOL C$(PLUGIN_NAME)App::InitInstance
(
)
{
	CWinApp::InitInstance();
	return TRUE;
}

AK::Wwise::IPluginBase* __stdcall AkCreatePlugin( unsigned short in_usCompanyID, unsigned short in_usPluginID )
{
	AKASSERT( in_usCompanyID == $(AUTHORING_PLUGIN_NAME)::CompanyID && in_usPluginID == $(AUTHORING_PLUGIN_NAME)::PluginID );
	return new $(AUTHORING_PLUGIN_NAME);
}

bool __stdcall AkGetSoundEngineCallbacks( unsigned short in_usCompanyID, unsigned short in_usPluginID, AkCreatePluginCallback & out_funcEffect, AkCreateParamCallback & out_funcParam )
{
	AKASSERT( in_usCompanyID == $(AUTHORING_PLUGIN_NAME)::CompanyID && in_usPluginID == $(AUTHORING_PLUGIN_NAME)::PluginID );

	out_funcEffect = Create$(PLUGIN_NAME)FX;
	out_funcParam = Create$(PLUGIN_NAME)FXParams;
	return true;
}

DEFINEDUMMYASSERTHOOK;
